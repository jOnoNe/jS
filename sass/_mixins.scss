
@mixin transition($type, $time, $ease) {
	-webkit-transition: $type $time $ease;
	-moz-transition: $type $time $ease;
	-ms-transition: $type $time $ease;
	-o-transition: $type $time $ease;
	transition: $type $time $ease;
}

@mixin bkgsize($type) {
	-webkit-background-size: $type;
	-moz-background-size: $type;
	-ms-background-size: $type;
	-o-background-size: $type;
	background-size: $type;
}

@mixin boxsize($type) {
	-webkit-box-sizing: $type;
	-moz-box-sizing: $type;
	-ms-box-sizing: $type;
	-o-box-sizing: $type;
	box-sizing: $type;
}

@mixin fontface($style-name, $file, $weight, $style) {
	$filepath: "../fonts/" + $file;
	@font-face {
		font-family: "#{$style-name}";
		src: 	url($filepath + ".eot");
		src: 	url($filepath + ".eot?#iefix") format('embedded-opentype'),
				url($filepath + ".woff") format('woff'),
				url($filepath + ".ttf")  format('truetype');
		font-weight: $weight;
		font-style: $style;
	}
}

@mixin optional-at-root($sel) {
  @at-root #{if(not &, $sel, selector-append(&, $sel))} {
	@content;
  }
}

@mixin placeholder {
  @include optional-at-root('::-webkit-input-placeholder') {
	@content;
  }

  @include optional-at-root(':-moz-placeholder') {
	@content;
  }

  @include optional-at-root('::-moz-placeholder') {
	@content;
  }

  @include optional-at-root(':-ms-input-placeholder') {
	@content;
  }
}

@mixin animation($str) {					//USAGE:  @include animation('slide-down 5s 3');
	-webkit-animation: #{$str};
	-moz-animation: #{$str};
	-ms-animation: #{$str};
	-o-animation: #{$str};
	animation: #{$str};      
}

@mixin opacity($opacity) {					//USAGE:  @include opacity(0.8);
	opacity: $opacity;
	$opacity-ie: $opacity * 100;
	filter: alpha(opacity=$opacity-ie);
}

@mixin box-shadow($top, $left, $blur, $size, $color, $inset: false) {		//USAGE  @include box-shadow(1px,1px,1px,0, #fff, true);
	@if $inset {
		-webkit-box-shadow:inset $top $left $blur $size $color;
		-moz-box-shadow:inset $top $left $blur $size $color;
		box-shadow:inset $top $left $blur $size $color;
	} @else {
		-webkit-box-shadow: $top $left $blur $size $color;
		-moz-box-shadow: $top $left $blur $size $color;
		box-shadow: $top $left $blur $size $color;
	}
}

@mixin vertical-align {
	position: relative;
	top: 50%;
	-webkit-transform: translateY(-50%);
	-ms-transform: translateY(-50%);
	transform: translateY(-50%);
}

@mixin center($horizontal: true, $vertical: true) {			//USAGE:   @include center;    @include center(true, false);
  position: absolute;
  @if ($horizontal and $vertical) {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  } @else if ($horizontal) {
    left: 50%;
    transform: translate(-50%, 0);
  } @else if ($vertical) {
    top: 50%;
    transform: translate(0, -50%);
  }
}

@mixin triangle($dir, $size, $color) {
    border: $size transparent solid;
 
    @if ($dir == "top" or $dir == "up") {
        border-bottom-color: $color;
    }
    @else if ($dir == "right" or $dir == "after") {
        border-left-color: $color;
    }
    @else if ($dir == "bottom" or $dir == "down") {
        border-top-color: $color;
    }
    @else if ($dir == "left" or $dir == "before") {
        border-right-color: $color;
    }
}

//TRANSFORMS
@mixin transform($transforms) {
	-moz-transform: $transforms;
	-o-transform: $transforms;
	-ms-transform: $transforms;
	-webkit-transform: $transforms;
	transform: $transforms;
}

@mixin rotate ($deg) {
	@include transform(rotate(#{$deg}deg));
}
 

@mixin scale($scale) {
	@include transform(scale($scale));
} 

@mixin translate ($x, $y) {
	@include transform(translate($x, $y));
}

@mixin skew ($x, $y) {
	@include transform(skew(#{$x}deg, #{$y}deg));
}

@mixin transform-origin ($origin) {
	moz-transform-origin: $origin;
	-o-transform-origin: $origin;
	-ms-transform-origin: $origin;
	-webkit-transform-origin: $origin;
	transform-origin: $origin;
}